package com.security;

import java.util.ArrayList;
import java.util.List;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.HttpMethod;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class AppSecurity {
	@Bean
	public BCryptPasswordEncoder passwordEncoder() {
		return new BCryptPasswordEncoder();
	}
	@Bean
	public InMemoryUserDetailsManager configAuth() {
		List<UserDetails> users= new ArrayList<UserDetails>();
		//for admin
		List<GrantedAuthority> authorities= new ArrayList<GrantedAuthority>();
		authorities.add(new SimpleGrantedAuthority("ADMIN"));
		UserDetails admin= new User("admin", "{noop}admin123", authorities);
		users.add(admin);
		
		// for manager
		List<GrantedAuthority> authorities2= new ArrayList<GrantedAuthority>();
		authorities2.add(new SimpleGrantedAuthority("MANAGER"));
		UserDetails manager= new User("manager", "{noop}manager123", authorities2);
		users.add(manager);
		return new InMemoryUserDetailsManager(users);
		
	}
	@Bean
	public SecurityFilterChain securityFilterChain(HttpSecurity security)throws Exception{
		security.csrf(csrf -> csrf.disable())
	     .authorizeHttpRequests(auth ->auth
		.requestMatchers(HttpMethod.POST,"/register","/login").permitAll()
		.requestMatchers(HttpMethod.GET,"/login","/register").permitAll()
		.requestMatchers("/loadusers").hasAuthority("MANAGER")
		.anyRequest().authenticated())
	     .formLogin(formLogin -> formLogin.defaultSuccessUrl("/login",true));
	
	    
	    
	     
		return security.build();
	}

}
